apply plugin: 'java-library'
apply plugin: 'java-test-fixtures'
apply plugin: 'jacoco'
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'maven-publish'

def defaultEncoding = 'UTF-8'

def integration = gradle.sharedServices.registerIfAbsent("integration", BuildService) {
    maxParallelUsages = 1
}

compileJava {
    options.encoding = defaultEncoding
    options.compilerArgs = ['-Xlint:-options'] // , '-Xlint:unchecked', '-Xlint:deprecation']
}

compileTestJava {
    options.encoding = defaultEncoding
    options.compilerArgs = ['-Xlint:-options'] // , '-Xlint:unchecked', '-Xlint:deprecation']
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.assertj:assertj-core:3.18.1"
    testImplementation "nl.jqno.equalsverifier:equalsverifier:3.5"
    testRuntimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"
}

java {
    withSourcesJar()
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = sourceCompatibility

test {
    useJUnitPlatform {
        excludeTags 'elasticsearch'
    }
    systemProperty 'java.awt.headless', 'true'
    maxHeapSize = '2G'
    jvmArgs '-noverify', '-XX:TieredStopAtLevel=1'
}

task integrationTest(type: Test) {
    usesService(integration)
    description = 'Runs integration tests.'
    group = 'verification'

    useJUnitPlatform {
        includeTags 'elasticsearch'
    }

    systemProperty 'java.awt.headless', 'true'
    maxHeapSize = '2G'

    shouldRunAfter test
}

check.dependsOn integrationTest

jacocoTestReport {
    dependsOn test, integrationTest
    executionData.from = fileTree(buildDir).include("/jacoco/*.exec")
}

jar {
    manifest {
        attributes( ['Implementation-Version': project.version] )
    }
    bnd( 'Bundle-SymbolicName': project.group + '.' + project.name.replace( '-', '.' ),
         '-nouses': 'true',
         '-dsannotations': '*',
         'Implementation-Version': project.version )
}

task allDependencies(type: DependencyReportTask) {}

task allDependencyInsight(type: DependencyInsightReportTask) {}
