apply plugin: 'java-library'
apply plugin: 'java-test-fixtures'
apply plugin: 'jacoco'
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'maven-publish'

def defaultEncoding = 'UTF-8'

compileJava {
    options.encoding = defaultEncoding
    options.compilerArgs = ['-Xlint:-options'] // , '-Xlint:unchecked', '-Xlint:deprecation']
}

compileTestJava {
    options.encoding = defaultEncoding
    options.compilerArgs = ['-Xlint:-options'] // , '-Xlint:unchecked', '-Xlint:deprecation']
}

dependencies {
    testImplementation libs.junit.jupiter.api
    testImplementation libs.junit.jupiter.params
    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.mockito.core
    testImplementation libs.mockito.junitjupiter
    testImplementation libs.assertj.core
    testImplementation libs.equalsverifier
    testRuntimeOnly libs.slf4j.simple
}

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = sourceCompatibility
}

test {
    useJUnitPlatform {
        excludeTags 'elasticsearch'
    }
    systemProperty 'java.awt.headless', 'true'
    systemProperty 'xp.script-engine', project.findProperty("xp.script-engine")?:'Nashorn'
    maxHeapSize = '2G'
    jvmArgs '-XX:TieredStopAtLevel=1'
}


jacocoTestReport {
    dependsOn test
    executionData.from = fileTree(layout.buildDirectory).include("/jacoco/*.exec")
}

jar {
    manifest {
        attributes( ['Implementation-Version': project.version] )
    }
    bundle {
        bnd( 'Bundle-SymbolicName': project.group + '.' + project.name.replace( '-', '.' ),
             '-nouses': 'true',
             '-dsannotations': '*',
             'Implementation-Version': project.version )
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task allDependencies(type: DependencyReportTask) {}

task allDependencyInsight(type: DependencyInsightReportTask) {}
