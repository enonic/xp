plugins {
    id 'distribution'
    id 'maven-publish'
}

configurations {
    lib
    mods
}

dependencies {
    lib project( ':launcher:launcher-main' )
    // JNA required for ElasticSearch but can't be refreshed. It should be part of lib
    lib libs.jna
}

dependencies {
    mods libs.nashorn
    mods libs.graalvm.polyglot
    mods libs.graalvm.js
    mods libs.graalvm.jsse
}

ext {
    bundleCopySpecs = []
}

addBundle( libs.jakarta.activation, 4 )
addBundle( libs.jakarta.mail, 4 )
addBundle( libs.jakarta.annotation, 4 )
addBundle( libs.jakarta.validation, 4 )

addBundle( libs.jakarta.xml.bind, 4 )
addBundle( libs.jakarta.jaxb.osgi, 4 )

// Core bundles
addBundle( libs.osgi.service.component, 5 )
addBundle( libs.osgi.service.cm, 5 )
addBundle( libs.osgi.util.promise, 5 )
addBundle( libs.osgi.util.function, 5 )

addBundle( libs.felix.metatype, 5 )
addBundle( libs.felix.eventadmin, 5 )
addBundle( libs.felix.configadmin, 5 )
addBundle( libs.felix.scr, 5 )

//Logging bridges
addBundle( libs.slf4j.jcloverslf4j, 6 )
addBundle( libs.slf4j.log4joverslf4j, 6 )
addBundle( libs.jboss.logging, 6 )

// Java Cryptography Extension
addBundle( libs.bcprov.jdk18on, 6 )

// Library dependencies
addBundle( libs.guava, 8 )
addBundle( libs.commons.lang, 8 )
addBundle( libs.commons.io, 8 )
addBundle( libs.commons.compress, 8 )
addBundle( libs.jackson.core, 8 )
addBundle( libs.jackson.annotations, 8 )
addBundle( libs.jackson.databind, 8 )
addBundle( libs.jackson.datatype.jsr310, 8 )
addBundle( libs.jackson.jaxrs.base, 8 )
addBundle( libs.jackson.jaxrs.jsonprovider, 8 )
addBundle( libs.tika.core, 8 )
addBundle( libs.tika.bundlestandard, 8 )
addBundle( libs.metrics.core, 8 )
addBundle( libs.metrics.json, 8 )
addBundle( libs.metrics.jvm, 8 )
addBundle( libs.metrics.annotation, 8)

addBundle( libs.metrics.jetty9, 8 )
addBundle( libs.hazelcast.hazelcast, 8 )
addBundle( libs.hazelcast.client, 8 )
addBundle( libs.hazelcast.kubernetes, 8 )
addBundle( libs.jparsec, 8 )
addBundle( project( ':repack:repack-elasticsearch' ), 8 )

addBundle( project( ':core:core-internal' ), 9 )

// API bundles
addBundle( project( ':core:core-api' ), 10 )
addBundle( project( ':script:script-api' ), 10 )
addBundle( project( ':portal:portal-api' ), 10 )
addBundle( project( ':web:web-api' ), 10 )
addBundle( project( ':jaxrs:jaxrs-api' ), 10 )
addBundle( project( ':admin:admin-api' ), 10 )

// Core bundles
addBundle( project( ':core:core-event' ), 22 )
addBundle( project( ':core:core-schema' ), 22 )
addBundle( project( ':core:core-repo' ), 22 )
addBundle( project( ':core:core-security' ), 22 )
addBundle( project( ':core:core-image' ), 22 )
addBundle( project( ':core:core-export' ), 22 )
addBundle( project( ':core:core-mail' ), 22 )
addBundle( project( ':core:core-elasticsearch' ), 22 )
addBundle( project( ':core:core-hazelcast' ), 22 )
addBundle( project( ':core:core-content' ), 22 )
addBundle( project( ':core:core-site' ), 22 )
addBundle( project( ':core:core-i18n' ), 22 )
addBundle( project( ':core:core-media' ), 22 )
addBundle( project( ':core:core-app' ), 22 )
addBundle( project( ':core:core-service' ), 22 )
addBundle( project( ':core:core-blobstore' ), 22 )
addBundle( project( ':core:core-extractor' ), 22 )
addBundle( project( ':core:core-auth' ), 22 )
addBundle( project( ':core:core-macro' ), 22 )
addBundle( project( ':core:core-task' ), 22 )
addBundle( project( ':core:core-audit' ), 22 )
addBundle( project( ':core:core-project' ), 22 )
addBundle( project( ':core:core-scheduler' ), 22 )
addBundle( project( ':core:core-shared' ), 22 )
addBundle( project( ':core:core-cluster' ), 23 )

// Server bundles
addBundle( project( ':server:server-config' ), 12 )
addBundle( project( ':server:server-deploy' ), 32 )
addBundle( project( ':server:server-shell' ), 17 )
addBundle( project( ':server:server-status' ), 17 )
addBundle( project( ':server:server-udc' ), 17 )
addBundle( project( ':server:server-rest' ), 30 )
addBundle( project( ':server:server-trace' ), 17 )

// Script app
addBundle( project( ':script:script-impl' ), 24 )

// Web app
addBundle( project( ':web:web-jetty' ), 26 )
addBundle( project( ':web:web-impl' ), 26 )
addBundle( project( ':web:web-vhost' ), 26 )
addBundle( project( ':web:web-dos' ), 26 )
addBundle( project( ':web:web-dispatch' ), 26 )
addBundle( project( ':web:web-session' ), 26 )
addBundle( project( ':web:web-header' ), 26 )

// JaxRs app
addBundle( project( ':jaxrs:jaxrs-impl' ), 28 )

// Portal app
addBundle( project( ':portal:portal-impl' ), 30 )

// Admin app
addBundle( project( ':admin:admin-event' ), 30 )
addBundle( project( ':admin:admin-impl' ), 30 )

// BlobStore providers
addBundle( project( ':blobstore:blobstore-file' ), 22 )

// Applications
addBundle( project( ':app:app-system' ), 32 )

def addBundle( dep, level )
{
    def config = getOrCreateBundleConfig( level )
    dependencies.add( config.name, dep )
}

def getOrCreateBundleConfig( level )
{
    def levelStr = "$level".padLeft( 2, '0' )
    def name = "bundle@$levelStr"

    def config = configurations.findByName( name )

    if ( config == null )
    {
        config = configurations.create( name )
        config.transitive = false
        config.description = "Bundles for run-level $level"

        bundleCopySpecs += project.copySpec {
            from config
            into levelStr
        }
    }
    return config
}

distributions {
    main {
        contents {
            into( '/system' ) {
                with( bundleCopySpecs as CopySpec[] )
            }
            into( '/lib' ) {
                from( configurations.lib )
            }
            into( '/mods' ) {
                from( configurations.mods )
            }
            into( '/' ) {
                from( 'src' ) {
                    filesMatching( '**/*.sh' ) {
                        mode = 0755
                    }
                }
                from( rootDir ) {
                    include 'LICENSE.txt'
                    include 'NOTICE.txt'
                }
            }
        }
    }
}

tasks.distTar.enabled = false

installDist {
    destinationDir = file( "$buildDir/install" )
}

build.dependsOn installDist

publishing.publications {
    mavenDist( MavenPublication ) {
        artifact distZip
    }
}
