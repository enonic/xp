import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java-base'
apply plugin: 'distribution'

configurations {
    lib
}

dependencies {
    lib project( ':launcher:launcher-main' )
    // JNA required for ElasticSearch but can't be refreshed. It should be part of lib
    lib 'net.java.dev.jna:jna:4.1.0'
}

ext {
    bundleCopySpecs = []
}

addBundle( 'com.sun.activation:jakarta.activation:1.2.1', 4 )
addBundle( "com.sun.mail:jakarta.mail:${jakartaMailVersion}", 4 )
addBundle( "jakarta.annotation:jakarta.annotation-api:${jakartaAnnotationApiVersion}", 4 )
addBundle( "jakarta.validation:jakarta.validation-api:2.0.2", 4 )

addBundle( 'javax.xml.bind:jaxb-api:2.2.11', 4 )
addBundle( 'com.sun.xml.bind:jaxb-core:2.2.11', 4 )
addBundle( 'com.sun.xml.bind:jaxb-impl:2.2.11', 4 )

// Core bundles
addBundle( 'org.apache.felix:org.apache.felix.metatype:1.2.2', 5 )
addBundle( 'org.apache.felix:org.apache.felix.eventadmin:1.5.0', 5 )
addBundle( 'org.apache.felix:org.apache.felix.configadmin:1.9.16', 5 )
addBundle( 'org.apache.felix:org.apache.felix.scr:2.1.16', 5 )
addBundle( 'org.osgi:org.osgi.util.promise:1.1.1', 5 )
addBundle( 'org.osgi:org.osgi.util.function:1.1.0', 5 )

//Logging bridges
addBundle( "org.slf4j:jcl-over-slf4j:${slf4jVersion}", 6 )
addBundle( "org.slf4j:log4j-over-slf4j:${slf4jVersion}", 6 )
addBundle( "org.jboss.logging:jboss-logging:3.3.2.Final", 6 )

// Java Cryptography Extension
addBundle( 'org.bouncycastle:bcprov-jdk15on:1.54', 6 )

// Library dependencies
addBundle( 'com.google.guava:guava:26.0-jre', 8 )
addBundle( "commons-lang:commons-lang:${commonsLangVersion}", 8 )
addBundle( "commons-io:commons-io:${commonsIoVersion}", 8 )
addBundle( "org.apache.commons:commons-compress:${commonsCompressVersion}", 8 )
addBundle( "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}", 8 )
addBundle( "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}", 8 )
addBundle( "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}", 8 )
addBundle( "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}", 8 )
addBundle( "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:${jacksonVersion}", 8 )
addBundle( "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jacksonVersion}", 8 )
addBundle( "org.apache.tika:tika-core:${tikaVersion}", 8 )
addBundle( "org.apache.tika:tika-bundle:${tikaVersion}", 8 )
addBundle( "io.dropwizard.metrics:metrics-core:${dropwizardMetricsVersion}", 8 )
addBundle( "io.dropwizard.metrics:metrics-json:${dropwizardMetricsVersion}", 8 )
addBundle( "io.dropwizard.metrics:metrics-jvm:${dropwizardMetricsVersion}", 8 )
addBundle( "io.dropwizard.metrics:metrics-jetty9:${dropwizardMetricsVersion}", 8 )
addBundle( "com.hazelcast:hazelcast:${hazelcastVersion}", 8 )
addBundle( "com.hazelcast:hazelcast-client:${hazelcastVersion}", 8 )
addBundle( "com.hazelcast:hazelcast-kubernetes:1.5.3", 8 )
addBundle( 'org.jparsec:jparsec:3.1', 8 )
addBundle( project( ':repack:repack-elasticsearch' ), 8 )
addBundle( project( ':repack:repack-resteasy' ), 8 )

addBundle( project( ':core:core-internal' ), 9 )

// API bundles
addBundle( project( ':core:core-api' ), 10 )
addBundle( project( ':script:script-api' ), 10 )
addBundle( project( ':portal:portal-api' ), 10 )
addBundle( project( ':web:web-api' ), 10 )
addBundle( project( ':jaxrs:jaxrs-api' ), 10 )
addBundle( project( ':admin:admin-api' ), 10 )

// Core bundles
addBundle( project( ':core:core-event' ), 22 )
addBundle( project( ':core:core-schema' ), 22 )
addBundle( project( ':core:core-repo' ), 22 )
addBundle( project( ':core:core-security' ), 22 )
addBundle( project( ':core:core-image' ), 22 )
addBundle( project( ':core:core-export' ), 22 )
addBundle( project( ':core:core-mail' ), 22 )
addBundle( project( ':core:core-elasticsearch' ), 22 )
addBundle( project( ':core:core-hazelcast' ), 22 )
addBundle( project( ':core:core-content' ), 22 )
addBundle( project( ':core:core-site' ), 22 )
addBundle( project( ':core:core-i18n' ), 22 )
addBundle( project( ':core:core-media' ), 22 )
addBundle( project( ':core:core-app' ), 22 )
addBundle( project( ':core:core-service' ), 22 )
addBundle( project( ':core:core-blobstore' ), 22 )
addBundle( project( ':core:core-extractor' ), 22 )
addBundle( project( ':core:core-auth' ), 22 )
addBundle( project( ':core:core-macro' ), 22 )
addBundle( project( ':core:core-task' ), 22 )
addBundle( project( ':core:core-audit' ), 22 )
addBundle( project( ':core:core-project' ), 22 )
addBundle( project( ':core:core-cluster' ), 23 )

// Server bundles
addBundle( project( ':server:server-config' ), 12 )
addBundle( project( ':server:server-deploy' ), 32 )
addBundle( project( ':server:server-shell' ), 17 )
addBundle( project( ':server:server-status' ), 17 )
addBundle( project( ':server:server-udc' ), 17 )
addBundle( project( ':server:server-rest' ), 30 )
addBundle( project( ':server:server-trace' ), 17 )

// Script app
addBundle( project( ':script:script-impl' ), 24 )

// Web app
addBundle( project( ':web:web-jetty' ), 26 )
addBundle( project( ':web:web-impl' ), 26 )
addBundle( project( ':web:web-vhost' ), 26 )
addBundle( project( ':web:web-dos' ), 26 )
addBundle( project( ':web:web-dispatch' ), 26 )
addBundle( project( ':web:web-session' ), 26 )
addBundle( project( ':web:web-header' ), 26 )

// JaxRs app
addBundle( project( ':jaxrs:jaxrs-impl' ), 28 )

// Portal app
addBundle( project( ':portal:portal-impl' ), 30 )
addBundle( project( ':portal:portal-owasp' ), 30 )

// Admin app
addBundle( project( ':admin:admin-event' ), 30 )
addBundle( project( ':admin:admin-impl' ), 30 )

// BlobStore providers
addBundle( project( ':blobstore:blobstore-file' ), 22 )

// Applications
addBundle( project( ':app:app-system' ), 32 )

def addBundle( dep, level )
{
    def config = getOrCreateBundleConfig( level )
    dependencies.add( config.name, dep )
}

def getOrCreateBundleConfig( level )
{
    def levelStr = "$level".padLeft( 2, '0' )
    def name = "bundle@$levelStr"

    def config = configurations.findByName( name )

    if (config == null)
    {
        config = configurations.create( name )
        config.transitive = false
        config.description = "Bundles for run-level $level"

        bundleCopySpecs += project.copySpec {
            from config
            into levelStr
        }
    }
    return config
}

distributions {
    main {
        contents {
            into('/system') {
                with( bundleCopySpecs as CopySpec[] )
            }
            into( '/lib' ) {
                from( configurations.lib )
            }
            into( '/bin' ) {
                from( 'src/bin' ) {
                    include '*.sh'
                    fileMode 0755
                }
            }
            into( '/service' ) {
                from( 'src/service' ) {
                    include '*.sh'
                    fileMode 0755
                    filter( ReplaceTokens, tokens: [version: version] )
                }
            }
            into( '/service/init.d' ) {
                from( 'src/service/init.d' ) {
                    include 'xp'
                    fileMode 0755
                }
            }
            into('/') {
                from( 'src' ) {
                    include 'README.txt'
                    expand project.properties
                }
                from( 'src' )
                from( rootDir ) {
                    include 'LICENSE.txt'
                    include 'NOTICE.txt'
                }
            }
        }
    }
}

tasks.distTar.enabled = false

installDist {
    destinationDir = file("$buildDir/install")
}

build.dependsOn installDist

task run( type: Exec, dependsOn: 'installDist' ) {
    description = 'Starts the server (use -Pdev for dev-mode or -Pdebug for debug-mode).'
    group = 'Dist'
    workingDir "$buildDir/install/bin"

    doFirst {
        if ( System.getProperty( "os.name" ).startsWith( 'Windows' ) )
        {
            commandLine 'cmd', '/c', 'server.bat'
        }
        else
        {
            commandLine './server.sh'
        }

        if ( project.hasProperty( 'dev' ) )
        {
            commandLine += 'dev'
        }

        if ( project.hasProperty( 'debug' ) )
        {
            commandLine += 'debug'
        }
    }
}

publishing.publications {
    mavenJava( MavenPublication ) {
        artifact distZip
    }
}
