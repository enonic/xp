Ext.define('Admin.view.account.wizard.group.GroupWizardPanel', {
    extend: 'Admin.view.WizardPanel',
    alias: 'widget.groupWizardPanel',

    requires: [
        'Admin.view.WizardHeader',
        'Admin.view.account.wizard.group.GroupWizardToolbar',
        'Admin.view.account.wizard.group.WizardStepGeneralPanel',
        'Admin.view.account.wizard.group.WizardStepMembersPanel',
        'Admin.view.SummaryTreePanel'
    ],

    border: 0,
    autoScroll: true,

    defaults: {
        border: false
    },


    initComponent: function () {
        var me = this;
        var isNew = this.isNewGroup();
        var isRole = this.isRole();

        this.autogenerateDisplayName = isNew;

        me.tbar = Ext.createByAlias('widget.groupWizardToolbar', {
            xtype: 'groupWizardToolbar',
            isNew: isNew,
            isRole: isRole
        });

        this.callParent(arguments);

        this.on('afterrender', function (groupWizard) {
            me.removeEmptySteps(groupWizard);
        });

        if (me.data) {
            this.addData({builtIn: me.data.type === 'role'});
        }

    },

    createSteps: function () {
        var me = this;
        var isRole = me.isRole();

        var generalStep = {
            stepTitle: "General",
            data: this.data,
            xtype: 'wizardStepGeneralPanel'
        };
        var membersStep = {
            stepTitle: "Members",
            data: this.data,
            xtype: 'wizardStepMembersPanel'
        };
        var summaryStep = {
            stepTitle: 'Summary',
            dataType: 'group',
            xtype: 'summaryTreePanel'
        };

        if (isRole) {
            return [membersStep, summaryStep];
        } else {
            return [generalStep, membersStep, summaryStep];
        }
    },

    resolveHeaderData: function (data) {
        var isNew = this.isNewGroup();
        return {
            displayName: isNew ? 'Display name' : data.displayName,
            qualifiedName: isNew ? this.userstore + '\\' : data.qualifiedName,
            iconUrl: isNew ? 'rest/account/image/default/group' : data.image_url,
            tipText: isNew ? 'Group' : Ext.String.capitalize(data.type)
        }
    },

    removeEmptySteps: function (wizardPanel) {
        wizardPanel.items.each(function (item) {
            if (!item.alwaysKeep && item.getForm && (item.getForm().getFields().getCount() === 0)) {
                wizardPanel.remove(item);
            }
        });
    },

    isNewGroup: function () {
        return Ext.isEmpty(this.data);
    },

    isRole: function () {
        return this.data && this.data.type === 'role';
    },

    getWizardHeader: function () {
        return this.down('wizardHeader');
    },

    getData: function () {
        return Ext.apply(this.callParent(), this.getWizardHeader().getData());
    },

    createIcon: function () {
        var headerData = this.resolveHeaderData(this.data);
        return  {
            xtype: 'image',
            plain: true,
            width: 110,
            height: 110,
            margin: '0 10 0 0',
            src: headerData.iconUrl,
            listeners: {
                render: function (cmp) {
                    Ext.tip.QuickTipManager.register({
                        target: cmp.el,
                        text: headerData.tipText,
                        width: 110,
                        dismissDelay: 10000 // Hide after 10 seconds hover
                    });
                }
            }
        };
    },

    createWizardHeader: function () {
        return {
            xtype: 'wizardHeader',
            pathConfig: {
                hidden: true
            },
            displayNameConfig: {
                readOnly: true
            },
            nameProperty: 'qualifiedName',
            nameConfig: {
                readOnly: true,
                stripCharsRe: /[^a-z0-9\-:]+/ig,
                vtype: 'qualifiedName'
            },
            data: this.data
        };
    },

    createActionButton: function () {
        return {
            xtype: 'button',
            text: 'Save',
            action: 'saveGroup'
        };
    }
});
