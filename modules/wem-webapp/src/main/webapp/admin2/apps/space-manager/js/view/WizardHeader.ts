module admin.ui {

    export interface DisplayNameConfig {
        emptyText?: string;
        enableKeyEvents?: bool;
        hideLabel?: bool;
        autoFocus?: bool;
        // TODO: What is max length?
        //maxLength: 255,
        //enforceMaxLength: true
    }

    export interface PathConfig {
        hidden?: bool;
        emptyText?: string;
        hideLabel?: bool;
    }

    export interface NameConfig {
        hidden?: bool;
        allowBlank?: bool;
        emptyText?: string;
        enableKeyEvents?: bool;
        hideLabel?: bool;
        vtype?: string;
        stripCharsRe?: RegExp;
        // TODO: What is max length?
        //maxLength: 255,
        //enforceMaxLength: true
    }

    export class WizardHeader {
        ext; // Ext.form.Panel

        private displayNameField:any; // Ext.form.field.Text
        private pathField:any; // Ext.form.field.Display
        private nameField:any; // Ext.form.field.Text
        private data:Object;
        private autogenerateName:bool;
        private autogenerateDisplayName:bool;

        private displayNameProperty:string;
        private displayNameConfig:DisplayNameConfig;
        private pathProperty:string;
        private pathConfig:PathConfig;
        private nameProperty:string;
        private nameConfig:NameConfig;

        resolveHeaderData:(data:Object) => Object;

        private static DEFAULT_DISPLAY_NAME_CONFIG:DisplayNameConfig = {
            emptyText: 'Display Name',
            enableKeyEvents: true,
            hideLabel: true,
            autoFocus: true
        };
        private static DEFAULT_NAME_CONFIG:NameConfig = {
            hidden: false,
            allowBlank: false,
            emptyText: 'Name',
            enableKeyEvents: true,
            hideLabel: true,
            vtype: 'name',
            stripCharsRe: /[^a-z0-9\-]+/ig
        };
        private static DEFAULT_PATH_CONFIG:PathConfig = {
            hidden: false,
            emptyText: 'path/to/',
            hideLabel: true
        };

        constructor(data:Object, displayNameConfig:DisplayNameConfig = {}, pathConfig:PathConfig = {}, nameConfig:NameConfig = {},
                    displayNameProperty:string = 'displayName', pathProperty:string = 'path', nameProperty:string = 'name') {

            this.data = data;
            this.displayNameConfig = <DisplayNameConfig> Ext.apply({}, displayNameConfig, WizardHeader.DEFAULT_DISPLAY_NAME_CONFIG);
            this.pathConfig = <PathConfig> Ext.apply({}, pathConfig, WizardHeader.DEFAULT_PATH_CONFIG);
            this.nameConfig = <NameConfig> Ext.apply({}, nameConfig, WizardHeader.DEFAULT_NAME_CONFIG);
            this.displayNameProperty = displayNameProperty;
            this.pathProperty = pathProperty;
            this.nameProperty = nameProperty;

            var panel = new Ext.form.Panel({
                itemId: 'wizardHeader',
                cls: 'admin-wizard-header-container',
                border: false
            });
            this.ext = panel;
            this.initComponent();
        }

        private initComponent() {
            var me = this.ext;

            this.appendVtypes();

            var headerData = this.prepareHeaderData(this.data);

            this.autogenerateName = Ext.isEmpty(headerData[this.nameProperty]);
            this.autogenerateDisplayName = Ext.isEmpty(headerData[this.displayNameProperty]);

            this.displayNameField = new Ext.form.field.Text(Ext.apply({
                xtype: 'textfield',
                grow: true,
                growMin: 200,
                name: this.displayNameProperty,
                value: headerData[this.displayNameProperty],
                cls: 'admin-display-name',
                dirtyCls: 'admin-display-name-dirty'
            }, this.displayNameConfig));

            // add listeners separately so they don't get overridden by config
            this.displayNameField.on({
                afterrender: this.onDisplayNameAfterrender,
                keyup: this.onDisplayNameKey,
                change: this.onDisplayNameChanged,
                scope: this
            });

            this.pathField = new Ext.form.field.Display(Ext.apply({
                xtype: 'displayfield',
                cls: 'admin-path',
                dirtyCls: 'admin-path-dirty',
                value: headerData[this.pathProperty]
            }, this.pathConfig));

            this.nameField = new Ext.form.field.Text(Ext.apply({
                xtype: 'textfield',
                grow: true,
                growMin: 60,
                cls: 'admin-name',
                dirtyCls: 'admin-name-dirty',
                name: this.nameProperty,
                value: headerData[this.nameProperty],
                listeners: {
                    change: function (textfield, newValue) {
                        textfield.setValue(textfield.processRawValue(newValue));
                    }, scope: this
                }

            }, this.nameConfig));

            // add listeners separately so they don't get overridden by config
            this.nameField.on({
                keyup: this.onNameKey,
                change: this.onNameChanged,
                scope: this
            });

            var items = [
                this.displayNameField
            ];

            if (!this.pathField.hidden && !this.nameField.hidden) {
                items.push({
                    xtype: 'fieldcontainer',
                    hideLabel: true,
                    layout: 'hbox',
                    items: [
                        this.pathField,
                        this.nameField
                    ]
                });
            } else if (!this.pathField.hidden) {
                items.push(this.pathField);
            } else if (!this.nameField.hidden) {
                items.push(this.nameField);
            }
            me.add(items);

//            me.callParent(arguments);
            me.addEvents('displaynamechange', 'displaynameoverride', 'namechange', 'nameoverride');
        }

        private onDisplayNameAfterrender(field):void {
            if (!field.readOnly && field.autoFocus) {
                field.focus(false, 100);
                // Deselect text, for unknown reason text is always selected when focus is gained
                field.selectText(0, 0);
            }
        }

        private onDisplayNameKey(field, event, opts):void {
            var wasAutoGenerate = this.autogenerateDisplayName;
            var autoGenerate = Ext.isEmpty(field.getValue());
            if (wasAutoGenerate != autoGenerate) {
                this.ext.fireEvent('displaynameoverride', !autoGenerate);
            }
            this.autogenerateDisplayName = autoGenerate;
        }

        private onDisplayNameChanged(field, newVal, oldVal, opts):void {
            if (this.ext.fireEvent('displaynamechange', newVal, oldVal) !== false && this.autogenerateName) {
                var processedValue = this.nameField.processRawValue(this.preProcessName(newVal));
                this.nameField.setValue(processedValue);
            }
            this.nameField.growMax = this.ext.getEl().getWidth() - 100;
            this.nameField.doComponentLayout();
        }

        private onNameKey(field, event, opts):void {
            var wasAutoGenerate = this.autogenerateName;
            var autoGenerate = Ext.isEmpty(field.getValue());
            if (wasAutoGenerate != autoGenerate) {
                this.ext.fireEvent('nameoverride', !autoGenerate);
            }
            this.autogenerateName = autoGenerate;
        }

        private onNameChanged(field, newVal, oldVal, opts):void {
            this.ext.fireEvent('namechange', newVal, oldVal);
        }

        private appendVtypes():void {
            Ext.apply(Ext.form.field.VTypes, {
                name: function (val, field) {
                    return /^[a-z0-9\-]+$/i.test(val);
                },
                nameText: 'Not a valid name. Can contain digits, letters and "-" only.',
                nameMask: /^[a-z0-9\-]+$/i
            });
            Ext.apply(Ext.form.field.VTypes, {
                qualifiedName: function (val, field) {
                    return /^[a-z0-9\-:]+$/i.test(val);
                },
                qualifiedNameText: 'Not a valid qualified name. Can contain digits, letters, ":" and "-" only.',
                qualifiedNameMask: /^[a-z0-9\-:]+$/i
            });
            Ext.apply(Ext.form.field.VTypes, {
                path: function (val, field) {
                    return /^[a-z0-9\-\/]+$/i.test(val);
                },
                pathText: 'Not a valid path. Can contain digits, letters, "/" and "-" only.',
                pathMask: /^[a-z0-9\-\/]+$/i
            });
        }

        private preProcessName(displayName:string):string {
            // TODO: FIXME: TypeScript bitches on this. Commented out for now
            // Looks like it will be fixed on 0.9 - http://typescript.codeplex.com/workitem/621
            /*
             return !Ext.isEmpty(displayName) ? displayName.replace(/[\s+\./]/ig, '-').replace(/-{2,}/g, '-').replace(/^-|-$/g, '').toLowerCase() : '';
             */
            return displayName;
        }

        private prepareHeaderData(data:any):Object {
            return data && data.data || data || {};
        }

        setData(data:Object):void {
            this.data = data;
            if (this.resolveHeaderData) {
                this.ext.getForm().setValues(this.resolveHeaderData(data));
            }
        }

        getData():Object {
            var me = this.ext;
            return me.getForm().getFieldValues();
        }

        getDisplayName():string {
            return this.displayNameField.getValue();
        }

        setDisplayName(displayName:string):void {
            this.displayNameField.setValue(displayName);
        }

        setName(name:string):void {
            this.nameField.setValue(name);
        }
    }
}
