import type {
    Controller,
    Request,
    RequestBranch,
    RequestHeaders,
    RequestMethod,
    RequestMode,
    RequestScheme,
} from '../core/index';

import {
    expectAssignable,
	expectNotAssignable,
} from 'tsd';


type PageRequest = Omit<Request<{
    // Only allow literal string
    branch: RequestBranch
    method: RequestMethod
    mode: RequestMode
    scheme: RequestScheme

    // Make some optional properties required
    repositoryId: string
    webSocket: boolean
}>,
    // Omit/Disallow some optional properties
    'contextPath' | 'validTicket'
>;

const pageRequest = {
    method: 'GET',
    scheme: 'http',
    mode: 'preview',
    branch: 'draft',

    host: 'localhost',
    port: 8080,
    path: '/admin/site/preview/my-project/draft/my-site',
    rawPath: '/admin/site/preview/my-project/draft/my-site',
    url: 'http://localhost:8080/admin/site/preview/my-project/draft/my-site',
    remoteAddress: '127.0.0.1',
    webSocket: false,
    repositoryId: 'com.enonic.cms.my-project',
    params: {},
    headers: {
        Accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Accept-Encoding': 'gzip, deflate, br, zstd',
        'Accept-Language': 'en-GB,en-US;q=0.9,en;q=0.8,no;q=0.7',
        Connection: 'keep-alive',
        Cookie: 'app.browse.RecentItemsList=portal%3Asite; JSESSIONID=19g9dxfzwnyqo1i6ufom5ksuhg0',
        Host: 'localhost:8080',
        Referer: 'http://localhost:8080/admin/tool/com.enonic.app.contentstudio/main',
        'sec-ch-ua': 'Chromium;v=128, Not;A=Brand;v=24, Google Chrome;v=128',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': 'macOS',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',
    },
    getHeader: (header: string): string | null => {
        // When you just create an object, without declaring it's type, the type of the object is "autogenerated".
        // The autogenerated type has named properties rather than indexed properties.
        // If you later try to access a property using an index, it causes type errors, since "named" properties are not "indexed".
        // You can fix this either by casting to a type with an index signature, either upon creation, or on each usage.
        // Here the latter is done:
        const value = (pageRequest.headers as RequestHeaders)[header];
        if (value === undefined) {
            return null;
        }
        return value;
    },
    cookies: {
        'app.browse.RecentItemsList': 'portal%3Asite',
        JSESSIONID: '19g9dxfzwnyqo1i6ufom5ksuhg0',
    },
} as
// When you just create an object, without declaring it's type, the type of the object is "autogenerated".
// For properties that have literal string values, they are simply flattened down to string.
// Since the value of some of the properties of PageRequest are limitied to literal string,
// that causes a mismatch when comparing the autogenerated type with the PageRequest type.
// Just adding as const to the whole object avoids the flattening down to string.
const;

expectAssignable<PageRequest>(pageRequest);

expectNotAssignable<PageRequest>({
    ...pageRequest,
    contextPath: '/contextPath',
});

expectNotAssignable<PageRequest>({
    ...pageRequest,
    validTicket: true,
});

expectNotAssignable<PageRequest>({
    ...pageRequest,
    branch: 'stringButNotMatchingLiterals',
});

expectNotAssignable<PageRequest>({
    ...pageRequest,
    method: 'stringButNotMatchingLiterals',
});

expectNotAssignable<PageRequest>({
    ...pageRequest,
    mode: 'stringButNotMatchingLiterals',
});

expectNotAssignable<PageRequest>({
    ...pageRequest,
    scheme: 'stringButNotMatchingLiterals',
});

expectNotAssignable<PageRequest>({
    ...pageRequest,
    cookies: undefined,
});

expectNotAssignable<PageRequest>({
    ...pageRequest,
    headers: undefined,
});

expectNotAssignable<PageRequest>({
    ...pageRequest,
    params: undefined,
});

expectNotAssignable<PageRequest>({
    ...pageRequest,
    rawPath: undefined,
});

expectNotAssignable<PageRequest>({
    ...pageRequest,
    remoteAddress: undefined,
});

expectNotAssignable<PageRequest>({
    ...pageRequest,
    repositoryId: undefined,
});

expectNotAssignable<PageRequest>({
    ...pageRequest,
    webSocket: undefined,
});

type PageController = Controller<PageRequest>;

const log = {
    info: (message?: string, ...optionalParams: string[]) => { /* no-op */ },
};

expectAssignable<PageController>({
    get: (request: PageRequest) => {
        log.info('get request:%s', JSON.stringify(request, null, 4));
        return {
            status: 200,
        };
    },
});