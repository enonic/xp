plugins {
    id 'com.github.node-gradle.node'
}

node {
    download = true
    version = '16.15.0'
    workDir = file( "${rootProject.projectDir}/.gradle/nodejs" )
}

def packageVersion = '0.1.0'

/* Test */

task lint( type: NpmTask, dependsOn: npmInstall ) {
    description = 'Lint TS, JS, and JSON'
    args = [ 'run', 'lint:quiet' ]

    outputs.upToDateWhen { false }
}

/* Configure & Build */

def globalDirPath = "${project.projectDir}/typescript"
def globalNpmDirPath = "$globalDirPath/npm"

task typescript( type: NpmTask ) {
    description = 'Create JS and DTS files from TS'
    args = [ 'run', 'build' ]

    inputs.files(fileTree(project.projectDir).matching {
        include "lib-*/src/main/resources/**/*.ts"
    })

    outputs.files(fileTree(project.projectDir).matching {
        include "lib-*/build/resources/main/**/*.js"
        include "lib-*/build/resources/main/**/*.ts"
    })
}

task clean( type: Delete ) {
    delete globalNpmDirPath
}

/* Publish */

task prepareGlobalToPublish( type: Copy ) {
    into globalNpmDirPath

    from( globalDirPath ) {
        include "*.*"
    }

    from( './utils' ) {
        include 'package.template.json'
        filter {
            line -> line
                .replaceAll('%VERSION%', packageVersion )
                .replaceAll('%FULL_NAME%|%FILE_NAME%', 'global' )
                .replaceAll('%SHORT_NAME%', 'common' )
        }
        rename '.+', 'package.json'
    }
}

task publishGlobalToNpm( type: NpmTask, dependsOn: prepareGlobalToPublish ) {
    args = [ 'publish' ]
    workingDir = file( globalNpmDirPath )
}

task publishToNpm {
    finalizedBy publishGlobalToNpm
}

subprojects {
    if ( !isTsProject( project ) )
    {
        return
    }

    apply plugin: 'com.github.node-gradle.node'

    def npmDirPath = "$buildDir/npm"

    parent.typescript {
        shouldRunAfter processResources
    }

    task prepareLibToPublish( type: Copy, dependsOn: [ processResources, parent.typescript ] ) {
        def fullName = project.name
        def shortName = project.name.substring( 4 )

        into npmDirPath

        from( './' ) {
            include 'README.md'
        }

        from( "$buildDir/resources/main/lib/xp/" ) {
            include '*.d.ts'
        }

        from( '../utils' ) {
            include 'package.template.json'
            filter {
                line -> line
                    .replaceAll('%VERSION%', packageVersion )
                    .replaceAll('%FULL_NAME%', fullName )
                    .replaceAll('%SHORT_NAME%|%FILE_NAME%', shortName )
            }
            rename '.+', 'package.json'
        }
    }

    task publishLibToNpm( type: NpmTask, dependsOn: prepareLibToPublish ) {
        args = [ 'publish' ]
        workingDir = file( npmDirPath )
    }

    publishToNpm {
        finalizedBy publishLibToNpm
    }

    check {
        dependsOn parent.lint
    }

    test {
        dependsOn parent.typescript
    }

    jar {
        exclude '**/*.ts'
        dependsOn parent.typescript
    }
}

def isTsProject( Project p ) {
    return fileTree("${p.projectDir}/src/main/resources/lib/xp").matching {
        include { FileTreeElement details -> details.file.isFile() && details.file.name.endsWith( '.ts' ) }
    }.size() > 0
}
