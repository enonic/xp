plugins {
    id 'base'
    id 'com.github.node-gradle.node'
}

node {
    download = true
    version = '16.15.0'
}

def coreDir = "$projectDir/core/"

/* Clean */
clean {
    delete "$coreDir/build"
}

/* Test */

task lint( type: NpmTask, dependsOn: npmInstall ) {
    description = 'Lint TS, JS, and JSON'
    args = ['run', 'lint:quiet']

    outputs.upToDateWhen { false }
}

check.dependsOn lint

/* Configure & Build */

task typescript( type: NpmTask, dependsOn: npmInstall ) {
    description = 'Create JS and DTS files from TS'
    args = ['run', 'build']

    inputs.file "global.d.ts"
    inputs.files( fileTree( coreDir ).matching {
        include "**/*.ts"
    } )

    inputs.file "tsconfig.build.json"
    inputs.file "tsconfig.json"

    outputs.files( subprojects.buildDir.collect {
        fileTree( "$it/typescript/lib/xp/" ).matching {
            include "**/*.js"
        }
    } )
}

task prepareToJsdoc( type: Copy, dependsOn: typescript ) {
    into "$buildDir/js"
    into( "" ) {
        from projectDir
        include "lib-*/build/typescript/lib/xp/*.js"
        eachFile { fcd -> fcd.relativePath = new RelativePath( true, fcd.relativePath.segments.drop( 3 ) )
        }

    }
    into( "examples" ) {
        from projectDir
        include "lib-*/src/main/resources/lib/xp/examples/**/*.js"
        eachFile { fcd -> fcd.relativePath = new RelativePath( true, fcd.relativePath.segments.drop( 5 ) )
        }
    }
    includeEmptyDirs = false
}

task jsdoc( type: NpmTask, dependsOn: prepareToJsdoc ) {
    description = 'Build JSDoc for libraries.'
    args = ['run', 'jsdoc']
    doFirst {
        copy {
            from 'jsdoc/template/jsdoc-main.css'
            into "$buildDir/resources/main/jsdoc/styles"
        }
    }
}

/* Publish */

task prepareGlobalToPublish( type: Copy ) {
    into "$buildDir/npm"

    from 'README.md'
    from 'global.d.ts'

    from( 'package.template.json' ) {
        filter { line ->
            line
                .replaceAll( '%VERSION%', version )
                .replaceAll( '%FULL_NAME%|%FILE_NAME%', 'global' )
                .replaceAll( '%SHORT_NAME%', 'common' )
                .replaceAll( '%DESCRIPTION%', 'Global variables and functions type definition.' )
        }
        rename '.+', 'package.json'
    }
}

task prepareCoreToPublish( type: Copy ) {
    into "$coreDir/build/npm"

    from "$coreDir/README.md"
    from "$coreDir/index.d.ts"

    from( 'package.template.json' ) {
        filter { line ->
            line
                .replaceAll( '%VERSION%', version )
                .replaceAll( '%SHORT_NAME%', 'shared' )
                .replaceAll( '%FULL_NAME%', 'core' )
                .replaceAll( '%FILE_NAME%', 'index' )
                .replaceAll( '%DESCRIPTION%', 'Shared type definition for core libraries.' )
        }
        rename '.+', 'package.json'
    }
}

task prepareToPublish( dependsOn: [prepareGlobalToPublish, prepareCoreToPublish] ) {}

task publishGlobalToNpm( type: NpmTask, dependsOn: [prepareGlobalToPublish, npmInstall] ) {
    onlyIf { !version.endsWith( '-SNAPSHOT' ) }
    args = ['publish']
    workingDir = prepareGlobalToPublish.destinationDir
}

task publishCoreToNpm( type: NpmTask, dependsOn: [prepareCoreToPublish, npmInstall] ) {
    onlyIf { !version.endsWith( '-SNAPSHOT' ) }
    args = ['publish']
    workingDir = prepareCoreToPublish.destinationDir
}

task publishToNpm( dependsOn: [publishGlobalToNpm, publishCoreToNpm] ) {}

task packageJsdoc( type: Jar, dependsOn: jsdoc ) {
    from "$buildDir/resources/main/jsdoc"
    classifier = 'jsdoc'
}

task publish {
    dependsOn publishToNpm
}

artifacts {
    archives packageJsdoc
}

publishing.publications {
    mavenJava( MavenPublication ) {
        artifact( packageJsdoc ) {
            artifactId = 'docs'
        }
    }
}

subprojects {
    apply plugin: 'com.github.node-gradle.node'

    task prepareToTypescript( type: Copy ) {
        from( "src/main/resources" ) {
            include '**/*.ts'
            includeEmptyDirs = false
        }
        into "$buildDir/typescript"
    }

    parent.typescript.dependsOn prepareToTypescript

    processResources {
        from( "$buildDir/typescript" ) {
            include '**/*.js'
        }
        dependsOn parent.typescript
    }

    task prepareToPublish( type: Copy, dependsOn: processResources ) {
        def fullName = project.name
        def shortName = project.name.substring( 4 )

        def hasCoreDependency = new File( "$projectDir/src/main/resources/lib/xp/${shortName}.ts" ).text.contains( '@enonic-types/core' )
        def dependencies = hasCoreDependency ? [ '@enonic-types/core' ] : []

        into "$buildDir/npm"

        from( 'README.md' )
        from( "$buildDir/typescript/lib/xp/" ) {
            include '*.d.ts'
        }

        from( '../package.template.json' ) {
            filter { line ->
                line
                    .replaceAll( '%VERSION%', version )
                    .replaceAll( '%FULL_NAME%', fullName )
                    .replaceAll( '%SHORT_NAME%|%FILE_NAME%', shortName )
                    .replaceAll( '%DESCRIPTION%', "Type definitions for ${fullName}." )
                if ( dependencies.size > 0 )
                {
                    def depString = dependencies.collect { "        \"$it\": \"$version\"" }.join( ',\n' )
                    line.replaceAll( '"dependencies"\\: \\{\\}', "\"dependencies\": {\n$depString\n    }" )
                } else
                line
            }
            rename '.+', 'package.json'
        }
    }

    task publishToNpm( type: NpmTask, dependsOn: prepareToPublish ) {
        onlyIf { !version.endsWith( '-SNAPSHOT' ) }
        args = ['publish']
        workingDir = prepareToPublish.destinationDir
    }

    publish.dependsOn publishToNpm

    check.dependsOn parent.lint

    jar {
        exclude '**/*.ts'
    }
}
